Improving and extending the DEM code
====================================

In this section, we will tidy up the DEM generation code, grouping items into functions.

Introduction
------------
Whilst the previous version of the code we generated was ok and worked, its a very ugly and poorly organised. ne way to take this would be to group together some of the parts that 'go together' functionally into methods. This is quite easy to achieve:, first by defining a set of fu
nctions or methods. This could be:

::

  #!/usr/bin/env python
  import numpy as np
  
  def gaussianFilter(sizex,sizey=None,scale=0.333):
      '''
      Generate and return a 2D Gaussian function
      of dimensions (sizex,sizey)
  
      If sizey is not set, it defaults to sizex
      A scale can be defined to widen the function (default = 0.333)
      '''
      sizey = sizey or sizex
      x, y = np.mgrid[-sizex:sizex+1, -sizey:sizey+1]
      g = np.exp(-scale*(x**2/float(sizex)+y**2/float(sizey)))
      return g/g.sum()
  
  def randomDEM(nx,sizex,max,min,sizey=None,ny=None):
      '''
      Generate a pseudo-DEM from random correlated noise.
  
      Parameters:
          nx	:	number of pixels of the output
  	sizex	: 	number of pixels of the smoothing filter
    	max	:	max height in DEM
  	min	: 	min height in DEM
  
      Options:
  	sizey	:	defaults to sizex
      	ny	: 	defaults to nx
  
      '''
      from scipy import signal
      ny = ny or nx
      sizey = sizey or sizex
      dem1 = np.random.rand(nx+2*sizex,ny+2*sizey)
      demSmooth = signal.convolve(dem1,gaussianFilter(sizex,sizey),mode='valid')
      demSmooth = (demSmooth - demSmooth.min())/(demSmooth.max() - demSmooth.min())
      demSmooth = demSmooth*(max-min)+min
      return demSmooth
  
  def plot(array,file=None):
      '''
      Produce a plot of the 2D array
  
      Options:
  	file	:	specify an output file
      '''
      import matplotlib.pylab as plt
      plt.imshow(array,interpolation='nearest')
      if file == None:
          plt.show()
      else:
          plt.savefile(file)




This groups the jobs we have done in the previous exercise into three main functions, involving generating a Gaussian function in an array, generating the random DEM, and plotting. If we had properly planned what we were going to do, we would have identified these three functions as the core building blocks of our code. We would also have noted that generating the random DEM needs access to the Gaussian generating function. We have now included some comment text for each of these, so that we will remember what the functions do and how to use them (and other people looking at the code will know as well). We have also added some basic options to the functions, so that we can take sensible defaults if we wish.

We can now run the sequence:


  >>> smoothDEM = randomDEM(300,20,100.,0.,sizey=5)
  >>> plot(smoothDEM)


.. figure:: images/dem2Fig1.png
   :width: 15 cm

   Figure 1. Random DEM


There are a few features to note about this new code. First, we notice that we define functions/,methods with a line starting ``def`` and ending with ``:``. All code that belongs in that method is then indented (this makes it 'neat' but it also a requirement of Python). We will generally write some text on the purpose and inputs/outputs of the method (in between ``'''`` over multiple lines if we wish).  We can also note the mechanism for optional arguments to the method (e.g. ``sizey=None``).

Other than that, the code is very similar to what we previously wrote. One point of interest is the use of the logical statement ``or``. Consider::

    def gaussianFilter(sizex,sizey=None,scale=0.333):
        sizey = sizey or sizex

``sizex`` here is required, so will always be set. ``sizey`` takes a default value of ``None``. If we don't set ``sizey`` it will be ``None`` then, and we can verify that::

    >>> None or 'something else'
    'something else'

If however we do set ``sizey``, e.g. to ``10`` then::

    >>>10 or 'something else'
    10

The mechanism would have worked the same if we had set the default value of ``sizey`` to ``false`` but you can check that for yourself.

Raindrops keep falling on my DEM
--------------------------------

Now we have a few useful functions (that we might choose to re-use elsewhere) we can define some more operations fo
r our DEM. One might be a simple raindrop code which is one way we can define watersheds from a DEM. You will find
implementations of this in most GIS packages, but its a simple enough code to develop, quite fun to write, and we can demonstrate a few new things in scientific Python.

The main idea of a raindrop program is to suppose that a raindrop falls on a cell of the DEM, to suppose that it flows downhill (obviously you could account for other effects if you wanted to) and to produce a map of where it ends up. This will give us a drainage network.

differentiation
~~~~~~~~~~~~~~~

The first thing we should recognise is that each cell needs to know which direction downhill will be. We can apply this deterministically (just follow the steepest slope) or stochastically (randonly sample all downhill slopes). This obviously needs us to know the local gradient (slope and aspect) which we do with convolution as above:

::

  
  def grad2d(dem):
      '''
      Calculate the slope and gradient of a DEM
      '''
      from scipy import signal
      f0 = gaussianFilter(3)
      I = signal.convolve(dem,f0,mode='valid')
      f1 = np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
      f2 = f1.transpose()
      g1 = signal.convolve(I,f1,mode='valid')
      g2 = signal.convolve(I,f2,mode='valid')
      slope = np.sqrt(g1**2 + g2**2)
      aspect = np.arctan2(g2,g1)
      return slope, aspect



We can run this and plot the slope: 


  >>> slope,  aspect = grad2d(smoothDEM)
  >>> plot(slope)


.. figure:: images/dem2Fig2.png
   :width: 15 cm

   Figure 2. Slope


and aspect:


  >>> plot(aspect)


.. figure:: images/dem2Fig3.png
   :width: 15 cm

   Figure 3. Aspect


Some new features here:

- we have returned two arrays from the function (``slope, aspect``). This is done using a comma separated list.
- we set up the simple `Sobel <http://en.wikipedia.org/wiki/Sobel_operator>`_ filters 'by hand' as they are simple (``[[-1,0,1],[-2,0,2],[-1,0,1]]``) in a list.
- we then converted this list to a numpy array using ``np.array``.
- rather than having to define the second filter ``f2`` by hand, we generate it as the `transpose <http://mathworld.wolfram.com/Transpose.html>`_ of ``f1`` using ``np.transpose()``.
- we make use of several other numpy methods that we would expect to find (``np.sqrt()`` and ``np.arctan2()``) in a numerical library/package.

raindrops on roses: pseudocode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Optimisation should never be your primary concern when developing a piece of code, but if you know you can think of some clever, clear, and robust way of doing something that you know would otherwise be very slow, it might be worth an attempt. Generally, especially when you are starting coding, keep it simple.
If you really want to optimise, do that *once* you've got *everything* working.

So, the simplest way of doing this would be to consider a single raindrop at a time and follow its fate.

We can start to develop some `pseudocode <http://en.wikipedia.org/wiki/Pseudocode>`_ to do this. This allows us to write the algorithm we want to implement in a structured way, akin to plain english. This should really be 
independent of any computer language, as its the *algorithm* we are trying to define, but when you are working in a high level language such as Python, you might use elements of the language (once you are familiar with them). You might like to read some `guidelines <http://www.cs.cornell.edu/Courses/cs482/2003su/handouts/pseudocode.pdf>`_ on this, but you will find plenty of other general examples on the `web <http://www.google.co.uk/search?q=pseudocode&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a>`_.

A good idea is to start from some idea of what *output* we want, then think about what *inputs* we need for this (we can refine this as our ideas develop if needs be) and then decide on the processes we need to go through to go from the inputs to the output. 

Here, the *output* for our single raindrop is the grid cell it will end up in. We might also like to keep track of the cells we go through, and perhaps the total travel distance involved. 

The *inputs* we will need obviously include the DEM, and we might suspect that we need the local slope and aspect as well. The core of the algorithm is clearly going to be based around a choice of which cell we move to from the current cell. Everything else should just be iteratively applying this 'move'. Part of this 'move' will obviously also be a termination criterion, where we decide not to move any further. We can foresee that we might have to think about what happens to raindrops that fall off the edge of the DEM. These are all just 'concepts' we can form from thinking about and trying to visualise the problem, before we even start writing pseudocode.
Even if the final place we want to end up is e.g. delineation of catchments, we are making sure our focus is on a particular, solveable, part of the problem, rather than trying to work out every detail of everything from the outset. This is key for coding: break the problem down into a hierarchy of problems.


